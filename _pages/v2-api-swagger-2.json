{
  "swagger": "2.0",
  "info": {
    "title": "WeatherLink v2 API 1",
    "description": "This API provides descriptions of any and all weather stations, sensors and nodes associated with the API key provided. Various endpoints will return all stations, nodes or sensors associated with your API key; or results can be filtered by passing station, node or sensor IDs.  Additional endpoints provide the most recent time data was uploaded for each station; and a catalog of all types of sensors.\n\nThe Weatherlink Data API uses an API Key, API Secret and API Signature to sign each request to prevent others from accessing your data:\n\n  - As a user of this API you will be assigned API Keys which can be set to grant access to one or more weather stations.\n  \n  - You will also be assigned an API Secret. You need to keep the API Secret protected because it is used to sign your requests to the API.  It should never be passed directly in request URLs.\n  \n  - The API signature will be generated for each request at the time the request is made.  See below for detailed instructions.\n\n  - A timestamp parameter is also used to prevent bookmarking and reuse of URLs by requiring a unique URL for each request.\n\nTo sign a request let's walk through an example of the process to invoke the `/stations` operation and assume you have an API Key `987654321` and API Secret `ABC123`:\n1. Generate the current Unix timestamp and set this as the parameter `t`; e.g. `t=1506642732`\n1. Except for the apiSignature parameter, sort all the query parameters alphabetically by their parameter name using ASCII sorting. All parameter names are in US English so ASCII sorting is safe.\n1. Create a string by concatenating the name value pairs of the sorted parameters. For our example that would yield `api-key987654321t1506642732`\n1. Once the string is built run it through HMAC SHA-256 hashing and generate a hex encoded string. This is your API Signature. The `api-key987654321t1506642732` string with the `ABC123` API secret will hash to `ccbf62a726e7d99f329b092633fc305f3b796c2775f3f88f9ade4ae4a3bba040`\n1. Now you can make a call to /stations?api-key=987654321&t=1506642732&api-signature=ccbf62a726e7d99f329b092633fc305f3b796c2775f3f88f9ade4ae4a3bba040\n1. If any device IDs are passed as a path parameter, these should also be included.  For example, if station IDs 5555 and 6666 were included in the path, the string in step 3 above would be modified to `api-key987654321station-ids5555,6666t1506642732` and hash to `0232f9e5443b26038dfd0f3191b3bab1a6bcc79d2b811240cb8200be07b3b2b6`.  Similarly, query parameters such as `registered-since=1488509789` should be included as well if used in the API query.\n",
    "version": "v2"
  },
  "host": "api.weatherlink.com",
  "schemes": [
    "https"
  ],
  "basePath": "/v2",
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Weather Stations",
      "description": "Operations related to weather stations and their related sensors"
    }
  ],
  "securityDefinitions": {
    "GeneralSecurity": {
      "type": "apiKey",
      "description": "Unique API Key used to identify who is making the API call",
      "name": "api-key",
      "in": "query"
    }
  },
  "security": [
    {
      "GeneralSecurity": [

      ]
    }
  ],
  "parameters": {
    "ApiKey": {
      "name": "api-key",
      "type": "string",
      "in": "query",
      "required": true,
      "allowEmptyValue": false,
      "description": "API key\n"
    },
    "ApiSignature": {
      "name": "api-signature",
      "type": "string",
      "in": "query",
      "required": true,
      "allowEmptyValue": false,
      "description": "API signature\n"
    },
    "Timestamp": {
      "name": "t",
      "type": "integer",
      "in": "query",
      "required": true,
      "allowEmptyValue": false,
      "description": "Unix timestamp when the query is submitted\n"
    },
    "RegisteredSinceStations": {
      "name": "registered-since",
      "type": "integer",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Unix timestamp; only stations registered after the date/time specified will be returned\n"
    },
    "RegisteredSinceNodes": {
      "name": "registered-since",
      "type": "integer",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Unix timestamp; only nodes registered after the date/time specified will be returned\n"
    },
    "ModifiedSince": {
      "name": "modified-since",
      "type": "integer",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Unix timestamp; only sensors modified after the date/time specified will be returned\n"
    },
    "StationIds": {
      "name": "station-ids",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "List of one or more station IDs, separated by commas"
    },
    "NodeIds": {
      "name": "node-ids",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "List of one or more node IDs, separated by commas"
    },
    "SensorIds": {
      "name": "sensor-ids",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "List of one or more sensor IDs, separated by commas"
    }
  },
  "paths": {
    "/stations": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get all weather stations associated with your API Key",
        "description": "Returns data for all weather stations associated with the API Key passed in the query parameters.  Currently all stations are returned in a single response.  A future enhancement will provide pagination to reduce the size of the response.  The fields listed below are returned for each station; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **station_id** | ID of the station for purposes of this API |\n  | **station_name** | Name of the station |\n  | **gateway_id** | Hardware ID of the station's gateway represented as a decimal integer |\n  | **gateway_id_hex** | Hardware ID of the station's gateway represented as a hexadecimal string |\n  | **product_number** | Manufacturer's product number |\n  | **username** | Name of the registered user for the station |\n  | **user_email** | Email address of the registered user for the station |\n  | **company_name** | Company of the registered user for the station |\n  | **active** | Status of the station. 'true' = active; 'false' = inactive |\n  | **private** | If 'true', station data is viewable only to the registered user; if 'false', data is shared publicly |\n  | **recording_interval** | Time in minutes between recording of data by the system |\n  | **firmware_version** | The version number of the firmware currently installed on the station |\n  | **imei** | The International Mobile Equipment Identity number that identifies the station on cellular networks |\n  | **meid** | The Mobile Equipment Identifier that identifies the station on cellular networks |\n  | **registered_date** | Date the station was registered with Davis Instruments, as a Unix timestamp |\n  | **subscription_end_date** | Ending date of the data plan subscription associated with the station, as a Unix timestamp |\n  | **time_zone** | Named time zone in which the station is located |\n  | **city** | City in which the station is located |\n  | **region** | U.S. state or international region in which the station is located |\n  | **country** | Country in which the station is located |\n  | **latitude** | Latitude at which the station is located, in degrees |\n  | **longitude** | Longitude at which the station is located, in degrees |\n  | **elevation** | Elevation at which the station is located, in feet |\n",
        "parameters": [
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          },
          {
            "$ref": "#/parameters/RegisteredSinceStations"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/StationsResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Stations"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/stations/{station-ids}": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get weather stations for one or more station IDs provided",
        "description": "Returns data for weather stations selected by station IDs passed as a path parameter.  Up to 100 IDs may be passed; entering more than 100 will result in an error.  The fields listed below are returned for each station; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **station_id** | ID of the station for purposes of this API |\n  | **station_name** | Name of the station |\n  | **gateway_id** | Hardware ID of the station's gateway represented as a decimal integer |\n  | **gateway_id_hex** | Hardware ID of the station's gateway represented as a hexadecimal string |\n  | **product_number** | Manufacturer's product number |\n  | **username** | Name of the registered user for the station |\n  | **user_email** | Email address of the registered user for the station |\n  | **company_name** | Company of the registered user for the station |\n  | **active** | Status of the station. 'true' = active; 'false' = inactive |\n  | **private** | If 'true', station data is viewable only to the registered user; if 'false', data is shared publicly |\n  | **recording_interval** | Time in minutes between recording of data by the system |\n  | **firmware_version** | The version number of the firmware currently installed on the station |\n  | **imei** | The International Mobile Equipment Identity number that identifies the station on cellular networks |\n  | **meid** | The Mobile Equipment Identifier that identifies the station on cellular networks |\n  | **registered_date** | Date the station was registered with Davis Instruments, as a Unix timestamp |\n  | **subscription_end_date** | Ending date of the data plan subscription associated with the station, as a Unix timestamp |\n  | **time_zone** | Named time zone in which the station is located |\n  | **city** | City in which the station is located |\n  | **region** | U.S. state or international region in which the station is located |\n  | **country** | Country in which the station is located |\n  | **latitude** | Latitude at which the station is located, in degrees |\n  | **longitude** | Longitude at which the station is located, in degrees |\n  | **elevation** | Elevation at which the station is located, in feet |\n",
        "parameters": [
          {
            "$ref": "#/parameters/StationIds"
          },
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          },
          {
            "$ref": "#/parameters/RegisteredSinceStations"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/StationsResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Stations"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get all nodes attached to all weather stations associated with your API Key",
        "description": "Returns data for all nodes attached to all gateways associated with the API Key passed in the query parameters.  Currently all nodes are returned in a single response.  A future enhancement will provide pagination to reduce the size of the response.  The fields listed below are returned for each node; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **node_id** | ID of the node for purposes of this API |\n  | **node_name** | Name of the node |\n  | **registered_date** | Date the system was registered with Davis Instruments, as a Unix timestamp |\n  | **device_id** | Hardware ID of the node represented as a decimal integer |\n  | **device_id_hex** | Hardware ID of the node represented as a hexadecimal string |\n  | **firmware_version** | The version number of the firmware currently installed on the system |\n  | **active** | Status of the node. 'true' = active; 'false' = inactive |\n  | **station_id** | ID in this API of the station to which the node is attached |\n  | **station_name** | Name of the station to which the node is attached |\n  | **latitude** | Latitude at which the node is located, in degrees |\n  | **longitude** | Longitude at which the node is located, in degrees |\n  | **elevation** | Elevation at which the node is located, in feet |\n",
        "parameters": [
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          },
          {
            "$ref": "#/parameters/RegisteredSinceNodes"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/NodesResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Nodes"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/nodes/{node-ids}": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get nodes for one or more node IDs provided",
        "description": "Returns data for all nodes selected by node IDs passed as a path parameter. Up to 100 IDs may be passed; entering more than 100 will result in an error.  The fields listed below are returned for each node; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **node_id** | ID of the node for purposes of this API |\n  | **node_name** | Name of the node |\n  | **registered_date** | Date the system was registered with Davis Instruments, as a Unix timestamp |\n  | **device_id** | Hardware ID of the node represented as a decimal integer |\n  | **device_id_hex** | Hardware ID of the node represented as a hexadecimal string |\n  | **firmware_version** | The version number of the firmware currently installed on the system |\n  | **active** | Status of the node. 'true' = active; 'false' = inactive |\n  | **station_id** | ID in this API of the station to which the node is attached |\n  | **station_name** | Name of the station to which the node is attached |\n  | **latitude** | Latitude at which the node is located, in degrees |\n  | **longitude** | Longitude at which the node is located, in degrees |\n  | **elevation** | Elevation at which the node is located, in feet |\n",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIds"
          },
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          },
          {
            "$ref": "#/parameters/RegisteredSinceNodes"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/NodesResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Nodes"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/sensors": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get all sensors attached to all weather stations associated with your API Key",
        "description": "Returns data for all sensors attached to all gateways associated with the API Key passed in the query parameters.  Currently all sensors are returned in a single response.  A future enhancement will provide pagination to reduce the size of the response.  The fields listed below are returned for each sensor; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **lsid** | ID of the sensor for purposes of this API |\n  | **sensor_type** | Numerical type ID of the sensor |\n  | **category** | Category of the sensor |\n  | **manufacturer** | Name of the sensor manufactuer |\n  | **product_name** | Manufacturer's product name of the sensor |\n  | **product_number** | Manufacturer's product number of the sensor |\n  | **active** | Status of the station. 'true' = active; 'false' = inactive |\n  | **created_date** | Date the sensor was created, as a Unix timestamp |\n  | **modified_date** | Date the sensor was last modified, as a Unix timestamp |\n  | **station_id** | ID in this API of the station to which the sensor is attached |\n  | **station_name** | Name of the station to which the sensor is attached |\n  | **parent_device** | Type of device (Gateway or Node) to which the sensor is attached |\n  | **parent_device_name** | Name of the parent device |\n  | **parent_device_id** | Hardware ID of the parent device as a decimal integer |\n  | **parent_device_id_hex** | Hardware ID of the parent device as a hexadecimal string |\n  | **port_number** | Which port the sensor is plugged into on the parent device, if a node |\n  | **latitude** | Latitude at which the sensor is located, in degrees |\n  | **longitude** | Longitude at which the sensor is located, in degrees |\n  | **elevation** | Elevation at which the sensor is located, in feet |\n  | **rain_collector_type** | (if present) rain collector type of the sensor|\n",
        "parameters": [
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          },
          {
            "$ref": "#/parameters/ModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SensorsResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Sensors"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/sensors/{sensor-ids}": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get sensors for one or more sensor IDs provided",
        "description": "Returns data for all sensors selected by sensor IDs passed as a path parameter. Up to 100 IDs may be passed; entering more than 100 will result in an error.  The fields listed below are returned for each sensor; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **lsid** | ID of the sensor for purposes of this API |\n  | **sensor_type** | Numerical type ID of the sensor |\n  | **category** | Category of the sensor |\n  | **manufacturer** | Name of the sensor manufactuer |\n  | **product_name** | Manufacturer's product name of the sensor |\n  | **product_number** | Manufacturer's product number of the sensor |\n  | **active** | Status of the station. 'true' = active; 'false' = inactive |\n  | **created_date** | Date the sensor was created, as a Unix timestamp |\n  | **modified_date** | Date the sensor was last modified, as a Unix timestamp |\n  | **station_id** | ID in this API of the station to which the sensor is attached |\n  | **station_name** | Name of the station to which the sensor is attached |\n  | **parent_device** | Type of device (Gateway or Node) to which the sensor is attached |\n  | **parent_device_name** | Name of the parent device |\n  | **parent_device_id** | Hardware ID of the parent device as a decimal integer |\n  | **parent_device_id_hex** | Hardware ID of the parent device as a hexadecimal string |\n  | **port_number** | Which port the sensor is plugged into on the parent device, if a node |\n  | **latitude** | Latitude at which the sensor is located, in degrees |\n  | **longitude** | Longitude at which the sensor is located, in degrees |\n  | **elevation** | Elevation at which the sensor is located, in feet |\n  | **rain_collector_type** | (if present) rain collector type of the sensor|\n",
        "parameters": [
          {
            "$ref": "#/parameters/SensorIds"
          },
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          },
          {
            "$ref": "#/parameters/ModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SensorsResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Sensors"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/sensor-activity": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get latest reporting times for all sensors",
        "description": "Returns the most recent times data was uploaded for all sensors associated with the api key that was passed.  The fields listed below are returned for each sensor; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **lsid** | Id of the sensor for purposes of this API |\n  | **time_received** | Date and time data was last received at Davis Instruments, as a Unix timestamp |\n  | **time_recorded** | Date and time the latest-received data was recorded by the sensor, as a Unix timestamp |\n  | **time_loop_received** | Date and time the loop record was received at Davis Instruments, as a Unix timestamp (available only for Integrated Sensor Suite devices) |\n",
        "parameters": [
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SensorActivityResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Sensors"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/sensor-activity/{sensor-ids}": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get latest reporting times for one or more sensors for sensor IDs provided",
        "description": "Returns the most recent times data was uploaded for all sensors selected by sensor IDs passed as a path parameter. Up to 100 IDs may be passed; entering more than 100 will result in an error.  The fields listed below are returned for each sensor; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **lsid** | Id of the sensor for purposes of this API |\n  | **time_received** | Date and time data was last received at Davis Instruments, as a Unix timestamp |\n  | **time_recorded** | Date and time the latest-received data was recorded by the sensor, as a Unix timestamp |\n  | **time_loop_received** | Date and time the loop record was received at Davis Instruments, as a Unix timestamp (available only for Integrated Sensor Suite devices) |\n",
        "parameters": [
          {
            "$ref": "#/parameters/SensorIds"
          },
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SensorActivityResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403Sensors"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    },
    "/sensor-catalog/": {
      "get": {
        "tags": [
          "Weather Stations"
        ],
        "summary": "Get a catalog of all types of sensors",
        "description": "Returns a catalog of all available sensor types.  The fields listed below are returned for each sensor type; additionally, a **generated_at** field is returned for the entire response, containing a Unix timestamp of the time the response was returned by the server.\n  | name | description |\n  | ---- | ----------- |\n  | **sensor_type** | Numerical type Id of the sensor |\n  | **manufacturer** | Name of the sensor's manufacturer |\n  | **product_name** | Manufacturer's product name |\n  | **product_number** | Manufacturer's product number |\n  | **category** | Category of the sensor |\n  | **data_structures** | Data fields reported by the sensor, with data type and units of measurement |\n",
        "parameters": [
          {
            "$ref": "#/parameters/ApiKey"
          },
          {
            "$ref": "#/parameters/ApiSignature"
          },
          {
            "$ref": "#/parameters/Timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SensorCatalogResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse400"
            }
          },
          "401": {
            "description": "client not authenticated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse401"
            }
          },
          "403": {
            "description": "client not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse403"
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse404"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse500"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "StationsResponse": {
      "description": "Wrapper for station objects\n",
      "type": "object",
      "properties": {
        "stations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "station_id": {
                "type": "integer",
                "format": "int32"
              },
              "station_name": {
                "type": "string"
              },
              "gateway_id": {
                "type": "integer",
                "format": "int32"
              },
              "gateway_id_hex": {
                "type": "string"
              },
              "product_number": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "user_email": {
                "type": "string"
              },
              "company_name": {
                "type": "string"
              },
              "active": {
                "type": "boolean"
              },
              "private": {
                "type": "boolean"
              },
              "uploadInterval": {
                "type": "integer",
                "format": "int32"
              },
              "firmware_version": {
                "type": "integer",
                "format": "int32"
              },
              "imei": {
                "type": "string"
              },
              "meid": {
                "type": "string"
              },
              "registered_date": {
                "type": "integer",
                "format": "int32"
              },
              "subscription_end_date": {
                "type": "integer",
                "format": "int32"
              },
              "time_zone": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "latitude": {
                "type": "number",
                "format": "float"
              },
              "longitude": {
                "type": "number",
                "format": "float"
              },
              "elevation": {
                "type": "integer"
              }
            }
          }
        },
        "generated_at": {
          "type": "integer"
        }
      },
      "example": {
        "stations": [
          {
            "station_id": 6974,
            "station_name": "Private - BL Orchard Range Test x39",
            "gateway_id": 8388665,
            "gateway_id_hex": "001D0A800039",
            "product_number": "6800",
            "username": "davisroof",
            "user_email": "benp@davisnet.com",
            "company_name": "Keny Sam Company",
            "active": true,
            "private": true,
            "recording_interval": 5,
            "firmware_version": 1470358845,
            "imei": "351579055911216",
            "meid": "A1000045841C5D",
            "registered_date": 1467345143,
            "subscription_end_date": 1498881143,
            "time_zone": "America/Los_Angeles",
            "city": "Manteca",
            "region": "CA",
            "country": "USA",
            "latitude": 37.75104,
            "longitude": -121.25094,
            "elevation": 19
          },
          {
            "station_id": 7327,
            "station_name": "Hayward Mesh 15min x4F",
            "gateway_id": 8388687,
            "gateway_id_hex": "001D0A80004F",
            "product_number": "6801",
            "username": "diablo",
            "user_email": "Blane@davisnet.com",
            "company_name": "Keny Sam Company",
            "active": true,
            "private": true,
            "recording_interval": 15,
            "firmware_version": 1494962930,
            "imei": "351579055911216",
            "meid": "A1000045841C5D",
            "registered_date": 1467345143,
            "subscription_end_date": 1498881143,
            "time_zone": "America/Los_Angeles",
            "city": "Hayward",
            "region": "CA",
            "country": "USA",
            "latitude": 37.635952,
            "longitude": -122.124794,
            "elevation": 20.0344
          }
        ],
        "generated_at": 1509055056
      }
    },
    "NodesResponse": {
      "description": "Wrapper for node objects\n",
      "type": "object",
      "properties": {
        "stations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "node_id": {
                "type": "integer",
                "format": "int32"
              },
              "node_name": {
                "type": "string"
              },
              "registration_date": {
                "type": "integer",
                "format": "int32"
              },
              "device_id": {
                "type": "integer",
                "format": "int32"
              },
              "device_id_hex": {
                "type": "string"
              },
              "firmware_version": {
                "type": "integer"
              },
              "active": {
                "type": "boolean"
              },
              "station_id": {
                "type": "integer",
                "format": "int32"
              },
              "station_name": {
                "type": "string"
              },
              "latitude": {
                "type": "number",
                "format": "float"
              },
              "longitude": {
                "type": "number",
                "format": "float"
              },
              "elevation": {
                "type": "integer"
              }
            }
          }
        },
        "generated_at": {
          "type": "integer"
        }
      },
      "example": {
        "nodes": [
          {
            "node_id": 9029,
            "node_name": "xE8",
            "registered_date": 1467345143,
            "device_id": 9568488,
            "device_id_hex": "001D0A9200E8",
            "firmware_version": 0,
            "active": true,
            "station_id": 7459,
            "station_name": "Orchard Network CDMA",
            "latitude": 37.718246,
            "longitude": -121.3796,
            "elevation": 0
          },
          {
            "node_id": 9157,
            "node_name": "Training Room DEV",
            "registered_date": 1467345143,
            "device_id": 9568504,
            "device_id_hex": "001D0A9200F8",
            "firmware_version": 0,
            "active": false,
            "station_id": 7519,
            "station_name": "Hayward Sharks DEV",
            "latitude": 37.49338,
            "longitude": -122.26799,
            "elevation": 0
          }
        ],
        "generated_at": 1509055056
      }
    },
    "SensorsResponse": {
      "description": "Wrapper for sensor objects\n",
      "type": "object",
      "properties": {
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lsid": {
                "type": "integer",
                "format": "int32"
              },
              "sensor_type": {
                "type": "integer",
                "format": "int32"
              },
              "category": {
                "type": "string"
              },
              "manufacturer": {
                "type": "string"
              },
              "product_name": {
                "type": "string"
              },
              "product_number": {
                "type": "string"
              },
              "active": {
                "type": "boolean"
              },
              "created_date": {
                "type": "string",
                "format": "date-time"
              },
              "modified_date": {
                "type": "string",
                "format": "date-time"
              },
              "station_id": {
                "type": "integer",
                "format": "int32"
              },
              "station_name": {
                "type": "string"
              },
              "parent_device_type": {
                "type": "string"
              },
              "parent_device_name": {
                "type": "string"
              },
              "parent_device_id": {
                "type": "integer",
                "format": "int32"
              },
              "parent_device_hex": {
                "type": "string"
              },
              "port_number": {
                "type": "integer",
                "format": "int32"
              },
              "latitude": {
                "type": "number",
                "format": "float"
              },
              "longitude": {
                "type": "number",
                "format": "float"
              },
              "elevation": {
                "type": "integer"
              }
            }
          }
        },
        "generated_at": {
          "type": "integer"
        }
      },
      "example": {
        "sensors": [
          {
            "lsid": 4522,
            "sensor_type": 105,
            "category": "Temperature",
            "manufacturer": "Davis Instruments",
            "product_name": "Temperature Probe",
            "product_number": "6470",
            "active": false,
            "created_date": 1469150144,
            "modified_date": 1469578518,
            "station_id": 6974,
            "station_name": "Private - BL Orchard Range Test x39",
            "parent_device_type": "Node",
            "parent_device_name": "OLD - x6B",
            "parent_device_id": 9437291,
            "parent_device_id_hex": "001D0A90006B",
            "port_number": 2,
            "latitude": 37.63642,
            "longitude": -122.1263,
            "elevation": 0
          },
          {
            "lsid": 4523,
            "sensor_type": 100,
            "category": "Temp/Hum",
            "manufacturer": "Davis Instruments",
            "product_name": "Temp/Hum Sensor",
            "product_number": "6830",
            "active": false,
            "created_date": 1469150144,
            "modified_date": 1469578518,
            "station_id": 6974,
            "station_name": "Private - BL Orchard Range Test x39",
            "parent_device_type": "Node",
            "parent_device_name": "x70",
            "parent_device_id": 9437296,
            "parent_device_id_hex": "001D0A900070",
            "port_number": 1,
            "latitude": 37.63642,
            "longitude": -122.1263,
            "elevation": 0
          }
        ],
        "generated_at": 1509055056
      }
    },
    "SensorActivityResponse": {
      "description": "Wrapper for sensor activity\n",
      "type": "object",
      "properties": {
        "sensor_activity": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lsid": {
                "type": "integer",
                "format": "int32"
              },
              "time_received": {
                "type": "integer",
                "format": "int32"
              },
              "time_recorded": {
                "type": "integer",
                "format": "int32"
              },
              "time_loop_received": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "generated_at": {
          "type": "integer"
        }
      },
      "example": {
        "sensor_activity": [
          {
            "lsid": 4225,
            "time_received": 1473694823,
            "time_recorded": 1473694801
          },
          {
            "lsid": 6118,
            "time_loop_received": 1506727200
          }
        ],
        "generated_at": 1509055056
      }
    },
    "SensorCatalogResponse": {
      "description": "Wrapper for sensor types\n",
      "type": "object",
      "properties": {
        "sensor_types": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "sensor_type": {
                "type": "integer",
                "format": "int32"
              },
              "manufacturer": {
                "type": "string"
              },
              "product_name": {
                "type": "string"
              },
              "product_number": {
                "type": "string"
              },
              "category": {
                "type": "string"
              }
            }
          }
        }
      },
      "example": {
        "sensor_types": [
          {
            "sensor_type": 100,
            "manufacturer": "Davis Instruments",
            "product_name": "Temp/Hum Sensor",
            "product_number": 6830,
            "category": "Temp/Hum",
            "data_structure": {
              "max_temp": {
                "type": "float",
                "units": "degrees Fahrenheit"
              },
              "max_temp_time": {
                "type": "integer",
                "units": "seconds from epoch"
              },
              "avg_temp": {
                "type": "float",
                "units": "degrees Fahrenheit"
              },
              "max_hum": {
                "type": "float",
                "units": "percent relative humidity"
              },
              "max_hum_time": {
                "type": "integer",
                "units": "seconds from epoch"
              },
              "avg_hum": {
                "type": "float",
                "units": "percent relative humidity"
              }
            }
          },
          {
            "sensor_type": 23,
            "manufacturer": "Davis Instruments",
            "product_name": "Vantage Pro2",
            "product_number": "6322C",
            "category": "ISS",
            "data_structures": [
              {
                "data_structure_type": "1",
                "description": "WeatherLink IP/Vantage Connect Current Conditions Record - Revision A",
                "data_structure": {
                  "barometer": {
                    "type": "float",
                    "units": "inches of mercury"
                  },
                  "inside_temperature": {
                    "type": "float",
                    "units": "degrees Fahrenheit"
                  }
                }
              },
              {
                "data_structure_type": "2",
                "description": "WeatherLink IP/Vantage Connect Current Conditions Record - Revision B",
                "data_structure": {
                  "bar_trend": {
                    "type": "integer",
                    "units": "scale from -60 to 60"
                  },
                  "barometer": {
                    "type": "float",
                    "units": "inches of mercury"
                  },
                  "inside_temperature": {
                    "type": "float",
                    "units": "degrees fahrenheit"
                  }
                }
              },
              {
                "data_structure_type": "3",
                "description": "WeatherLink IP/Vantage Connect Archive Record - Revision A",
                "data_structure": {
                  "bar": {
                    "type": "float",
                    "units": "inches of mercury"
                  },
                  "et": {
                    "type": "float",
                    "units": "inches"
                  },
                  "moist_soil_1": {
                    "type": "integer",
                    "units": "centibars"
                  }
                }
              },
              {
                "data_structure_type": "4",
                "description": "WeatherLink IP/Vantage Connect Archive Record - Revision B",
                "data_structure": {
                  "solar_rad_avg": {
                    "type": "integer",
                    "units": "watts per square meter"
                  },
                  "wet_leaf_1": {
                    "type": "integer",
                    "units": "wetness scale from 0 to 15"
                  },
                  "wind_dir_of_prevail": {
                    "type": "integer",
                    "units": "direction code; 0=N, 1=NNE, ... 14=NW, 15=NNW"
                  }
                }
              },
              {
                "data_structure_type": "5",
                "description": "WeatherLink IP/Vantage Connect High/Low Record",
                "data_structure": {
                  "current_state_bar_trend": {
                    "type": "float",
                    "units": "inches of mercury"
                  },
                  "temp_out": {
                    "type": "float",
                    "units": "degrees Fahrenheit"
                  },
                  "wind_speed": {
                    "type": "integer",
                    "units": "miles per hour"
                  },
                  "wind_dir": {
                    "type": "integer",
                    "units": "degrees of compass"
                  }
                }
              },
              {
                "data_structure_type": "6",
                "description": "Enviromonitor ISS Current Conditions Record",
                "data_structure": {
                  "wind_speed": {
                    "type": "integer",
                    "units": "miles per hour"
                  },
                  "dir_of_hi_speed": {
                    "type": "integer",
                    "units": "direction code; 0=N, 1=NNE, ... 14=NW, 15=NNW"
                  },
                  "uv": {
                    "type": "float",
                    "units": "ultraviolet index"
                  }
                }
              },
              {
                "data_structure_type": "7",
                "description": "EnviroMonitor ISS Archive Record",
                "data_structure": {
                  "wind_speed": {
                    "type": "integer",
                    "units": "miles per hour"
                  },
                  "dir_of_hi_speed": {
                    "type": "integer",
                    "units": "direction code; 0=N, 1=NNE, ... 14=NW, 15=NNW"
                  },
                  "uv": {
                    "type": "float",
                    "units": "ultraviolet index"
                  }
                }
              },
              {
                "data_structure_type": "8",
                "description": "EnviroMonitor ISS Hi/Low Record",
                "data_structure": {
                  "wind_speed": {
                    "type": "integer",
                    "units": "miles per hour"
                  },
                  "dir_of_hi_speed": {
                    "type": "integer",
                    "units": "direction code; 0=N, 1=NNE, ... 14=NW, 15=NNW"
                  },
                  "uv": {
                    "type": "float",
                    "units": "ultraviolet index"
                  }
                }
              },
              {
                "data_structure_type": "9",
                "description": "EnviroMonitor Sensor Data Record",
                "data_structure": {
                  "wind_speed": {
                    "type": "integer",
                    "units": "miles per hour"
                  },
                  "dir_of_hi_speed": {
                    "type": "integer",
                    "units": "direction code; 0=N, 1=NNE, ... 14=NW, 15=NNW"
                  },
                  "uv": {
                    "type": "float",
                    "units": "ultraviolet index"
                  }
                }
              }
            ]
          }
        ],
        "generated_at": 1509055056
      }
    },
    "ErrorResponse400": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 400,
        "message": "Missing or malformed request"
      }
    },
    "ErrorResponse401": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 401,
        "message": "Unable to authenticate client"
      }
    },
    "ErrorResponse403": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 403,
        "message": "Access is not authorized"
      }
    },
    "ErrorResponse403Stations": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 403,
        "message": "Access is not authorized for one or more stations: 1234, 5678"
      }
    },
    "ErrorResponse403Nodes": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 403,
        "message": "Access is not authorized for one or more nodes: 1234, 5678"
      }
    },
    "ErrorResponse403Sensors": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 403,
        "message": "Access is not authorized for one or more sensors: 1234, 5678"
      }
    },
    "ErrorResponse404": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 404,
        "message": "Resource not found"
      }
    },
    "ErrorResponse500": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "example": {
        "code": 500,
        "message": "Internal error"
      }
    }
  }
}
